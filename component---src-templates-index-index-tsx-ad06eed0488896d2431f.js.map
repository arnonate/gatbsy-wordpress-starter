{"version":3,"sources":["webpack:///./src/templates/Index/Index.tsx"],"names":["RenderPosts","posts","directory","sort","a","b","moment","node","date","valueOf","map","edge","key","databaseId","format","to","slug","title","IndexQuery","IndexTemplate","data","page","className","site","siteMetadata","dangerouslySetInnerHTML","__html","content","edges","length","customPosts"],"mappings":"2FAAA,oKA2BaA,EAAc,SACzBC,EACAC,GAFyB,gBACzBD,MAA0B,IAG1BA,EACGE,MACC,SAACC,EAAGC,GAAJ,OACEC,IAAOF,EAAEG,KAAKC,MAAMC,UAAYH,IAAOD,EAAEE,KAAKC,MAAMC,aAEvDC,KAAI,SAAAC,GAAI,OACP,wBAAIC,IAAKD,EAAKJ,KAAKM,YACjB,8BAAOP,IAAOK,EAAKJ,KAAKC,MAAMM,OAAO,SAArC,OACA,kBAAC,OAAD,CAAMC,GAAE,IAAMb,EAAN,IAAmBS,EAAKJ,KAAKS,KAA7B,KAAuCL,EAAKJ,KAAKU,YA6CpDC,EAAmB,aAkCjBC,UA3EO,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,OACpB,kBAAC,IAAD,KACE,iCACGA,GAAQA,EAAKC,KACZ,oCACE,kBAAC,IAAD,CAAKJ,MAAOG,EAAKC,KAAKJ,QACtB,wBAAIK,UAAU,WAAWF,EAAKG,KAAKC,aAAaP,OAEhD,yBACEQ,wBAAyB,CACvBC,OAAQN,EAAKC,KAAKM,YAKxB,iEAGF,qCAEA,wBAAIL,UAAU,SACXF,GAAQA,EAAKnB,MAAM2B,MAAMC,OAAS,EACjC7B,EAAYoB,EAAKnB,MAAM2B,MAAO,SAE9B,mDAIJ,6CAEA,wBAAIN,UAAU,SACXF,GAAQA,EAAKU,YAAYF,MAAMC,OAAS,EACvC7B,EAAYoB,EAAKU,YAAYF,MAAO,gBAEpC","file":"component---src-templates-index-index-tsx-ad06eed0488896d2431f.js","sourcesContent":["import React from \"react\"\nimport { graphql, Link } from \"gatsby\"\nimport moment from \"moment\"\n\nimport { Layout, Seo } from \"../../components\"\nimport { Post } from \"../Post/Post\"\n\nexport type DataProps = {\n  data?: {\n    site: {\n      siteMetadata: {\n        title: string\n      }\n    }\n    page: {\n      title: string\n      content: string\n    }\n    posts: {\n      edges: { node: Post }[]\n    }\n    customPosts: {\n      edges: { node: Post }[]\n    }\n  }\n}\n\nexport const RenderPosts = (\n  posts: { node: Post }[] = [],\n  directory: string\n): React.ReactNode =>\n  posts\n    .sort(\n      (a, b): number =>\n        moment(a.node.date).valueOf() - moment(b.node.date).valueOf()\n    )\n    .map(edge => (\n      <li key={edge.node.databaseId}>\n        <span>{moment(edge.node.date).format(\"MM/YY\")} - </span>\n        <Link to={`/${directory}/${edge.node.slug}/`}>{edge.node.title}</Link>\n      </li>\n    ))\n\nconst IndexTemplate = ({ data }: Readonly<DataProps>): JSX.Element => (\n  <Layout>\n    <article>\n      {data && data.page ? (\n        <>\n          <Seo title={data.page.title} />\n          <h1 className=\"sr-only\">{data.site.siteMetadata.title}</h1>\n\n          <div\n            dangerouslySetInnerHTML={{\n              __html: data.page.content,\n            }}\n          />\n        </>\n      ) : (\n        <>No Page content returned.</>\n      )}\n\n      <h2>Posts</h2>\n\n      <ul className=\"posts\">\n        {data && data.posts.edges.length > 0 ? (\n          RenderPosts(data.posts.edges, \"posts\")\n        ) : (\n          <li>No Posts returned.</li>\n        )}\n      </ul>\n\n      <h2>Custom Posts:</h2>\n\n      <ul className=\"posts\">\n        {data && data.customPosts.edges.length > 0 ? (\n          RenderPosts(data.customPosts.edges, \"custom-posts\")\n        ) : (\n          <li>No Custom Posts returned.</li>\n        )}\n      </ul>\n    </article>\n  </Layout>\n)\n\nexport const IndexQuery: void = graphql`\n  query IndexPage($id: Int) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    page: wpPage(databaseId: { eq: $id }) {\n      content\n      title\n    }\n    posts: allWpPost(filter: { status: { eq: \"publish\" } }) {\n      edges {\n        node {\n          databaseId\n          date\n          slug\n          title\n        }\n      }\n    }\n    customPosts: allWpCustomPost(filter: { status: { eq: \"publish\" } }) {\n      edges {\n        node {\n          databaseId\n          date\n          slug\n          title\n        }\n      }\n    }\n  }\n`\n\nexport default IndexTemplate\n"],"sourceRoot":""}