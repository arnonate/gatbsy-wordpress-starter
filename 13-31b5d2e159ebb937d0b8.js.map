{"version":3,"sources":["webpack:///./node_modules/intersection-observer/intersection-observer.js"],"names":["window","IntersectionObserverEntry","prototype","Object","defineProperty","get","this","intersectionRatio","document","startDoc","doc","frame","getFrameElement","ownerDocument","registry","crossOriginUpdater","crossOriginRect","IntersectionObserver","THROTTLE_TIMEOUT","POLL_INTERVAL","USE_MUTATION_OBSERVER","_setupCrossOriginUpdater","boundingClientRect","intersectionRect","convertFromParentRect","top","bottom","left","right","width","height","forEach","observer","_checkForIntersections","_resetCrossOriginUpdater","observe","target","_observationTargets","some","item","element","nodeType","Error","_registerInstance","push","entry","_monitorIntersections","unobserve","filter","_unmonitorIntersections","length","_unregisterInstance","disconnect","_unmonitorAllIntersections","takeRecords","records","_queuedEntries","slice","_initThresholds","opt_threshold","threshold","Array","isArray","sort","t","i","a","isNaN","_parseRootMargin","opt_rootMargin","margins","split","map","margin","parts","exec","value","parseFloat","unit","win","defaultView","_monitoringDocuments","indexOf","callback","monitoringInterval","domObserver","setInterval","addEvent","MutationObserver","attributes","childList","characterData","subtree","_monitoringUnsubscribes","clearInterval","removeEvent","root","index","rootDoc","itemDoc","unsubscribe","splice","unsubscribes","rootIsInDom","_rootIsInDom","rootRect","_getRootRect","targetRect","getBoundingClientRect","rootContainsTarget","_rootContainsTarget","oldEntry","_computeTargetAndRootIntersection","newEntry","time","performance","now","rootBounds","_hasCrossedThreshold","isIntersecting","_callback","getComputedStyle","display","rect1","rect2","parent","getParentNode","atRoot","parentRect","parentComputedStyle","frameRect","frameIntersect","body","documentElement","overflow","Math","max","min","html","clientWidth","clientHeight","_expandRectByRootMargin","rect","_rootMarginValues","newRect","oldRatio","newRatio","thresholds","containsDeep","frameElement","e","ensureDOMRect","targetArea","intersectionArea","Number","toFixed","opt_options","fn","timeout","timer","options","bind","setTimeout","rootMargin","join","node","event","opt_useCapture","addEventListener","attachEvent","removeEventListener","detatchEvent","el","err","y","x","parentBoundingRect","parentIntersectionRect","child","parentNode","host","assignedSlot"],"mappings":"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","file":"13-31b5d2e159ebb937d0b8.js","sourcesContent":["/**\n * Copyright 2016 Google Inc. All Rights Reserved.\n *\n * Licensed under the W3C SOFTWARE AND DOCUMENT NOTICE AND LICENSE.\n *\n *  https://www.w3.org/Consortium/Legal/2015/copyright-software-and-document\n *\n */\n(function () {\n  'use strict'; // Exit early if we're not running in a browser.\n\n  if (typeof window !== 'object') {\n    return;\n  } // Exit early if all IntersectionObserver and IntersectionObserverEntry\n  // features are natively supported.\n\n\n  if ('IntersectionObserver' in window && 'IntersectionObserverEntry' in window && 'intersectionRatio' in window.IntersectionObserverEntry.prototype) {\n    // Minimal polyfill for Edge 15's lack of `isIntersecting`\n    // See: https://github.com/w3c/IntersectionObserver/issues/211\n    if (!('isIntersecting' in window.IntersectionObserverEntry.prototype)) {\n      Object.defineProperty(window.IntersectionObserverEntry.prototype, 'isIntersecting', {\n        get: function get() {\n          return this.intersectionRatio > 0;\n        }\n      });\n    }\n\n    return;\n  }\n  /**\n   * Returns the embedding frame element, if any.\n   * @param {!Document} doc\n   * @return {!Element}\n   */\n\n\n  function getFrameElement(doc) {\n    try {\n      return doc.defaultView && doc.defaultView.frameElement || null;\n    } catch (e) {\n      // Ignore the error.\n      return null;\n    }\n  }\n  /**\n   * A local reference to the root document.\n   */\n\n\n  var document = function (startDoc) {\n    var doc = startDoc;\n    var frame = getFrameElement(doc);\n\n    while (frame) {\n      doc = frame.ownerDocument;\n      frame = getFrameElement(doc);\n    }\n\n    return doc;\n  }(window.document);\n  /**\n   * An IntersectionObserver registry. This registry exists to hold a strong\n   * reference to IntersectionObserver instances currently observing a target\n   * element. Without this registry, instances without another reference may be\n   * garbage collected.\n   */\n\n\n  var registry = [];\n  /**\n   * The signal updater for cross-origin intersection. When not null, it means\n   * that the polyfill is configured to work in a cross-origin mode.\n   * @type {function(DOMRect|ClientRect, DOMRect|ClientRect)}\n   */\n\n  var crossOriginUpdater = null;\n  /**\n   * The current cross-origin intersection. Only used in the cross-origin mode.\n   * @type {DOMRect|ClientRect}\n   */\n\n  var crossOriginRect = null;\n  /**\n   * Creates the global IntersectionObserverEntry constructor.\n   * https://w3c.github.io/IntersectionObserver/#intersection-observer-entry\n   * @param {Object} entry A dictionary of instance properties.\n   * @constructor\n   */\n\n  function IntersectionObserverEntry(entry) {\n    this.time = entry.time;\n    this.target = entry.target;\n    this.rootBounds = ensureDOMRect(entry.rootBounds);\n    this.boundingClientRect = ensureDOMRect(entry.boundingClientRect);\n    this.intersectionRect = ensureDOMRect(entry.intersectionRect || getEmptyRect());\n    this.isIntersecting = !!entry.intersectionRect; // Calculates the intersection ratio.\n\n    var targetRect = this.boundingClientRect;\n    var targetArea = targetRect.width * targetRect.height;\n    var intersectionRect = this.intersectionRect;\n    var intersectionArea = intersectionRect.width * intersectionRect.height; // Sets intersection ratio.\n\n    if (targetArea) {\n      // Round the intersection ratio to avoid floating point math issues:\n      // https://github.com/w3c/IntersectionObserver/issues/324\n      this.intersectionRatio = Number((intersectionArea / targetArea).toFixed(4));\n    } else {\n      // If area is zero and is intersecting, sets to 1, otherwise to 0\n      this.intersectionRatio = this.isIntersecting ? 1 : 0;\n    }\n  }\n  /**\n   * Creates the global IntersectionObserver constructor.\n   * https://w3c.github.io/IntersectionObserver/#intersection-observer-interface\n   * @param {Function} callback The function to be invoked after intersection\n   *     changes have queued. The function is not invoked if the queue has\n   *     been emptied by calling the `takeRecords` method.\n   * @param {Object=} opt_options Optional configuration options.\n   * @constructor\n   */\n\n\n  function IntersectionObserver(callback, opt_options) {\n    var options = opt_options || {};\n\n    if (typeof callback != 'function') {\n      throw new Error('callback must be a function');\n    }\n\n    if (options.root && options.root.nodeType != 1) {\n      throw new Error('root must be an Element');\n    } // Binds and throttles `this._checkForIntersections`.\n\n\n    this._checkForIntersections = throttle(this._checkForIntersections.bind(this), this.THROTTLE_TIMEOUT); // Private properties.\n\n    this._callback = callback;\n    this._observationTargets = [];\n    this._queuedEntries = [];\n    this._rootMarginValues = this._parseRootMargin(options.rootMargin); // Public properties.\n\n    this.thresholds = this._initThresholds(options.threshold);\n    this.root = options.root || null;\n    this.rootMargin = this._rootMarginValues.map(function (margin) {\n      return margin.value + margin.unit;\n    }).join(' ');\n    /** @private @const {!Array<!Document>} */\n\n    this._monitoringDocuments = [];\n    /** @private @const {!Array<function()>} */\n\n    this._monitoringUnsubscribes = [];\n  }\n  /**\n   * The minimum interval within which the document will be checked for\n   * intersection changes.\n   */\n\n\n  IntersectionObserver.prototype.THROTTLE_TIMEOUT = 100;\n  /**\n   * The frequency in which the polyfill polls for intersection changes.\n   * this can be updated on a per instance basis and must be set prior to\n   * calling `observe` on the first target.\n   */\n\n  IntersectionObserver.prototype.POLL_INTERVAL = null;\n  /**\n   * Use a mutation observer on the root element\n   * to detect intersection changes.\n   */\n\n  IntersectionObserver.prototype.USE_MUTATION_OBSERVER = true;\n  /**\n   * Sets up the polyfill in the cross-origin mode. The result is the\n   * updater function that accepts two arguments: `boundingClientRect` and\n   * `intersectionRect` - just as these fields would be available to the\n   * parent via `IntersectionObserverEntry`. This function should be called\n   * each time the iframe receives intersection information from the parent\n   * window, e.g. via messaging.\n   * @return {function(DOMRect|ClientRect, DOMRect|ClientRect)}\n   */\n\n  IntersectionObserver._setupCrossOriginUpdater = function () {\n    if (!crossOriginUpdater) {\n      /**\n       * @param {DOMRect|ClientRect} boundingClientRect\n       * @param {DOMRect|ClientRect} intersectionRect\n       */\n      crossOriginUpdater = function crossOriginUpdater(boundingClientRect, intersectionRect) {\n        if (!boundingClientRect || !intersectionRect) {\n          crossOriginRect = getEmptyRect();\n        } else {\n          crossOriginRect = convertFromParentRect(boundingClientRect, intersectionRect);\n        }\n\n        registry.forEach(function (observer) {\n          observer._checkForIntersections();\n        });\n      };\n    }\n\n    return crossOriginUpdater;\n  };\n  /**\n   * Resets the cross-origin mode.\n   */\n\n\n  IntersectionObserver._resetCrossOriginUpdater = function () {\n    crossOriginUpdater = null;\n    crossOriginRect = null;\n  };\n  /**\n   * Starts observing a target element for intersection changes based on\n   * the thresholds values.\n   * @param {Element} target The DOM element to observe.\n   */\n\n\n  IntersectionObserver.prototype.observe = function (target) {\n    var isTargetAlreadyObserved = this._observationTargets.some(function (item) {\n      return item.element == target;\n    });\n\n    if (isTargetAlreadyObserved) {\n      return;\n    }\n\n    if (!(target && target.nodeType == 1)) {\n      throw new Error('target must be an Element');\n    }\n\n    this._registerInstance();\n\n    this._observationTargets.push({\n      element: target,\n      entry: null\n    });\n\n    this._monitorIntersections(target.ownerDocument);\n\n    this._checkForIntersections();\n  };\n  /**\n   * Stops observing a target element for intersection changes.\n   * @param {Element} target The DOM element to observe.\n   */\n\n\n  IntersectionObserver.prototype.unobserve = function (target) {\n    this._observationTargets = this._observationTargets.filter(function (item) {\n      return item.element != target;\n    });\n\n    this._unmonitorIntersections(target.ownerDocument);\n\n    if (this._observationTargets.length == 0) {\n      this._unregisterInstance();\n    }\n  };\n  /**\n   * Stops observing all target elements for intersection changes.\n   */\n\n\n  IntersectionObserver.prototype.disconnect = function () {\n    this._observationTargets = [];\n\n    this._unmonitorAllIntersections();\n\n    this._unregisterInstance();\n  };\n  /**\n   * Returns any queue entries that have not yet been reported to the\n   * callback and clears the queue. This can be used in conjunction with the\n   * callback to obtain the absolute most up-to-date intersection information.\n   * @return {Array} The currently queued entries.\n   */\n\n\n  IntersectionObserver.prototype.takeRecords = function () {\n    var records = this._queuedEntries.slice();\n\n    this._queuedEntries = [];\n    return records;\n  };\n  /**\n   * Accepts the threshold value from the user configuration object and\n   * returns a sorted array of unique threshold values. If a value is not\n   * between 0 and 1 and error is thrown.\n   * @private\n   * @param {Array|number=} opt_threshold An optional threshold value or\n   *     a list of threshold values, defaulting to [0].\n   * @return {Array} A sorted list of unique and valid threshold values.\n   */\n\n\n  IntersectionObserver.prototype._initThresholds = function (opt_threshold) {\n    var threshold = opt_threshold || [0];\n    if (!Array.isArray(threshold)) threshold = [threshold];\n    return threshold.sort().filter(function (t, i, a) {\n      if (typeof t != 'number' || isNaN(t) || t < 0 || t > 1) {\n        throw new Error('threshold must be a number between 0 and 1 inclusively');\n      }\n\n      return t !== a[i - 1];\n    });\n  };\n  /**\n   * Accepts the rootMargin value from the user configuration object\n   * and returns an array of the four margin values as an object containing\n   * the value and unit properties. If any of the values are not properly\n   * formatted or use a unit other than px or %, and error is thrown.\n   * @private\n   * @param {string=} opt_rootMargin An optional rootMargin value,\n   *     defaulting to '0px'.\n   * @return {Array<Object>} An array of margin objects with the keys\n   *     value and unit.\n   */\n\n\n  IntersectionObserver.prototype._parseRootMargin = function (opt_rootMargin) {\n    var marginString = opt_rootMargin || '0px';\n    var margins = marginString.split(/\\s+/).map(function (margin) {\n      var parts = /^(-?\\d*\\.?\\d+)(px|%)$/.exec(margin);\n\n      if (!parts) {\n        throw new Error('rootMargin must be specified in pixels or percent');\n      }\n\n      return {\n        value: parseFloat(parts[1]),\n        unit: parts[2]\n      };\n    }); // Handles shorthand.\n\n    margins[1] = margins[1] || margins[0];\n    margins[2] = margins[2] || margins[0];\n    margins[3] = margins[3] || margins[1];\n    return margins;\n  };\n  /**\n   * Starts polling for intersection changes if the polling is not already\n   * happening, and if the page's visibility state is visible.\n   * @param {!Document} doc\n   * @private\n   */\n\n\n  IntersectionObserver.prototype._monitorIntersections = function (doc) {\n    var win = doc.defaultView;\n\n    if (!win) {\n      // Already destroyed.\n      return;\n    }\n\n    if (this._monitoringDocuments.indexOf(doc) != -1) {\n      // Already monitoring.\n      return;\n    } // Private state for monitoring.\n\n\n    var callback = this._checkForIntersections;\n    var monitoringInterval = null;\n    var domObserver = null; // If a poll interval is set, use polling instead of listening to\n    // resize and scroll events or DOM mutations.\n\n    if (this.POLL_INTERVAL) {\n      monitoringInterval = win.setInterval(callback, this.POLL_INTERVAL);\n    } else {\n      addEvent(win, 'resize', callback, true);\n      addEvent(doc, 'scroll', callback, true);\n\n      if (this.USE_MUTATION_OBSERVER && 'MutationObserver' in win) {\n        domObserver = new win.MutationObserver(callback);\n        domObserver.observe(doc, {\n          attributes: true,\n          childList: true,\n          characterData: true,\n          subtree: true\n        });\n      }\n    }\n\n    this._monitoringDocuments.push(doc);\n\n    this._monitoringUnsubscribes.push(function () {\n      // Get the window object again. When a friendly iframe is destroyed, it\n      // will be null.\n      var win = doc.defaultView;\n\n      if (win) {\n        if (monitoringInterval) {\n          win.clearInterval(monitoringInterval);\n        }\n\n        removeEvent(win, 'resize', callback, true);\n      }\n\n      removeEvent(doc, 'scroll', callback, true);\n\n      if (domObserver) {\n        domObserver.disconnect();\n      }\n    }); // Also monitor the parent.\n\n\n    if (doc != (this.root && this.root.ownerDocument || document)) {\n      var frame = getFrameElement(doc);\n\n      if (frame) {\n        this._monitorIntersections(frame.ownerDocument);\n      }\n    }\n  };\n  /**\n   * Stops polling for intersection changes.\n   * @param {!Document} doc\n   * @private\n   */\n\n\n  IntersectionObserver.prototype._unmonitorIntersections = function (doc) {\n    var index = this._monitoringDocuments.indexOf(doc);\n\n    if (index == -1) {\n      return;\n    }\n\n    var rootDoc = this.root && this.root.ownerDocument || document; // Check if any dependent targets are still remaining.\n\n    var hasDependentTargets = this._observationTargets.some(function (item) {\n      var itemDoc = item.element.ownerDocument; // Target is in this context.\n\n      if (itemDoc == doc) {\n        return true;\n      } // Target is nested in this context.\n\n\n      while (itemDoc && itemDoc != rootDoc) {\n        var frame = getFrameElement(itemDoc);\n        itemDoc = frame && frame.ownerDocument;\n\n        if (itemDoc == doc) {\n          return true;\n        }\n      }\n\n      return false;\n    });\n\n    if (hasDependentTargets) {\n      return;\n    } // Unsubscribe.\n\n\n    var unsubscribe = this._monitoringUnsubscribes[index];\n\n    this._monitoringDocuments.splice(index, 1);\n\n    this._monitoringUnsubscribes.splice(index, 1);\n\n    unsubscribe(); // Also unmonitor the parent.\n\n    if (doc != rootDoc) {\n      var frame = getFrameElement(doc);\n\n      if (frame) {\n        this._unmonitorIntersections(frame.ownerDocument);\n      }\n    }\n  };\n  /**\n   * Stops polling for intersection changes.\n   * @param {!Document} doc\n   * @private\n   */\n\n\n  IntersectionObserver.prototype._unmonitorAllIntersections = function () {\n    var unsubscribes = this._monitoringUnsubscribes.slice(0);\n\n    this._monitoringDocuments.length = 0;\n    this._monitoringUnsubscribes.length = 0;\n\n    for (var i = 0; i < unsubscribes.length; i++) {\n      unsubscribes[i]();\n    }\n  };\n  /**\n   * Scans each observation target for intersection changes and adds them\n   * to the internal entries queue. If new entries are found, it\n   * schedules the callback to be invoked.\n   * @private\n   */\n\n\n  IntersectionObserver.prototype._checkForIntersections = function () {\n    if (!this.root && crossOriginUpdater && !crossOriginRect) {\n      // Cross origin monitoring, but no initial data available yet.\n      return;\n    }\n\n    var rootIsInDom = this._rootIsInDom();\n\n    var rootRect = rootIsInDom ? this._getRootRect() : getEmptyRect();\n\n    this._observationTargets.forEach(function (item) {\n      var target = item.element;\n      var targetRect = getBoundingClientRect(target);\n\n      var rootContainsTarget = this._rootContainsTarget(target);\n\n      var oldEntry = item.entry;\n\n      var intersectionRect = rootIsInDom && rootContainsTarget && this._computeTargetAndRootIntersection(target, targetRect, rootRect);\n\n      var newEntry = item.entry = new IntersectionObserverEntry({\n        time: now(),\n        target: target,\n        boundingClientRect: targetRect,\n        rootBounds: crossOriginUpdater && !this.root ? null : rootRect,\n        intersectionRect: intersectionRect\n      });\n\n      if (!oldEntry) {\n        this._queuedEntries.push(newEntry);\n      } else if (rootIsInDom && rootContainsTarget) {\n        // If the new entry intersection ratio has crossed any of the\n        // thresholds, add a new entry.\n        if (this._hasCrossedThreshold(oldEntry, newEntry)) {\n          this._queuedEntries.push(newEntry);\n        }\n      } else {\n        // If the root is not in the DOM or target is not contained within\n        // root but the previous entry for this target had an intersection,\n        // add a new record indicating removal.\n        if (oldEntry && oldEntry.isIntersecting) {\n          this._queuedEntries.push(newEntry);\n        }\n      }\n    }, this);\n\n    if (this._queuedEntries.length) {\n      this._callback(this.takeRecords(), this);\n    }\n  };\n  /**\n   * Accepts a target and root rect computes the intersection between then\n   * following the algorithm in the spec.\n   * TODO(philipwalton): at this time clip-path is not considered.\n   * https://w3c.github.io/IntersectionObserver/#calculate-intersection-rect-algo\n   * @param {Element} target The target DOM element\n   * @param {Object} targetRect The bounding rect of the target.\n   * @param {Object} rootRect The bounding rect of the root after being\n   *     expanded by the rootMargin value.\n   * @return {?Object} The final intersection rect object or undefined if no\n   *     intersection is found.\n   * @private\n   */\n\n\n  IntersectionObserver.prototype._computeTargetAndRootIntersection = function (target, targetRect, rootRect) {\n    // If the element isn't displayed, an intersection can't happen.\n    if (window.getComputedStyle(target).display == 'none') return;\n    var intersectionRect = targetRect;\n    var parent = getParentNode(target);\n    var atRoot = false;\n\n    while (!atRoot && parent) {\n      var parentRect = null;\n      var parentComputedStyle = parent.nodeType == 1 ? window.getComputedStyle(parent) : {}; // If the parent isn't displayed, an intersection can't happen.\n\n      if (parentComputedStyle.display == 'none') return null;\n\n      if (parent == this.root || parent.nodeType ==\n      /* DOCUMENT */\n      9) {\n        atRoot = true;\n\n        if (parent == this.root || parent == document) {\n          if (crossOriginUpdater && !this.root) {\n            if (!crossOriginRect || crossOriginRect.width == 0 && crossOriginRect.height == 0) {\n              // A 0-size cross-origin intersection means no-intersection.\n              parent = null;\n              parentRect = null;\n              intersectionRect = null;\n            } else {\n              parentRect = crossOriginRect;\n            }\n          } else {\n            parentRect = rootRect;\n          }\n        } else {\n          // Check if there's a frame that can be navigated to.\n          var frame = getParentNode(parent);\n          var frameRect = frame && getBoundingClientRect(frame);\n\n          var frameIntersect = frame && this._computeTargetAndRootIntersection(frame, frameRect, rootRect);\n\n          if (frameRect && frameIntersect) {\n            parent = frame;\n            parentRect = convertFromParentRect(frameRect, frameIntersect);\n          } else {\n            parent = null;\n            intersectionRect = null;\n          }\n        }\n      } else {\n        // If the element has a non-visible overflow, and it's not the <body>\n        // or <html> element, update the intersection rect.\n        // Note: <body> and <html> cannot be clipped to a rect that's not also\n        // the document rect, so no need to compute a new intersection.\n        var doc = parent.ownerDocument;\n\n        if (parent != doc.body && parent != doc.documentElement && parentComputedStyle.overflow != 'visible') {\n          parentRect = getBoundingClientRect(parent);\n        }\n      } // If either of the above conditionals set a new parentRect,\n      // calculate new intersection data.\n\n\n      if (parentRect) {\n        intersectionRect = computeRectIntersection(parentRect, intersectionRect);\n      }\n\n      if (!intersectionRect) break;\n      parent = parent && getParentNode(parent);\n    }\n\n    return intersectionRect;\n  };\n  /**\n   * Returns the root rect after being expanded by the rootMargin value.\n   * @return {ClientRect} The expanded root rect.\n   * @private\n   */\n\n\n  IntersectionObserver.prototype._getRootRect = function () {\n    var rootRect;\n\n    if (this.root) {\n      rootRect = getBoundingClientRect(this.root);\n    } else {\n      // Use <html>/<body> instead of window since scroll bars affect size.\n      var html = document.documentElement;\n      var body = document.body;\n      rootRect = {\n        top: 0,\n        left: 0,\n        right: html.clientWidth || body.clientWidth,\n        width: html.clientWidth || body.clientWidth,\n        bottom: html.clientHeight || body.clientHeight,\n        height: html.clientHeight || body.clientHeight\n      };\n    }\n\n    return this._expandRectByRootMargin(rootRect);\n  };\n  /**\n   * Accepts a rect and expands it by the rootMargin value.\n   * @param {DOMRect|ClientRect} rect The rect object to expand.\n   * @return {ClientRect} The expanded rect.\n   * @private\n   */\n\n\n  IntersectionObserver.prototype._expandRectByRootMargin = function (rect) {\n    var margins = this._rootMarginValues.map(function (margin, i) {\n      return margin.unit == 'px' ? margin.value : margin.value * (i % 2 ? rect.width : rect.height) / 100;\n    });\n\n    var newRect = {\n      top: rect.top - margins[0],\n      right: rect.right + margins[1],\n      bottom: rect.bottom + margins[2],\n      left: rect.left - margins[3]\n    };\n    newRect.width = newRect.right - newRect.left;\n    newRect.height = newRect.bottom - newRect.top;\n    return newRect;\n  };\n  /**\n   * Accepts an old and new entry and returns true if at least one of the\n   * threshold values has been crossed.\n   * @param {?IntersectionObserverEntry} oldEntry The previous entry for a\n   *    particular target element or null if no previous entry exists.\n   * @param {IntersectionObserverEntry} newEntry The current entry for a\n   *    particular target element.\n   * @return {boolean} Returns true if a any threshold has been crossed.\n   * @private\n   */\n\n\n  IntersectionObserver.prototype._hasCrossedThreshold = function (oldEntry, newEntry) {\n    // To make comparing easier, an entry that has a ratio of 0\n    // but does not actually intersect is given a value of -1\n    var oldRatio = oldEntry && oldEntry.isIntersecting ? oldEntry.intersectionRatio || 0 : -1;\n    var newRatio = newEntry.isIntersecting ? newEntry.intersectionRatio || 0 : -1; // Ignore unchanged ratios\n\n    if (oldRatio === newRatio) return;\n\n    for (var i = 0; i < this.thresholds.length; i++) {\n      var threshold = this.thresholds[i]; // Return true if an entry matches a threshold or if the new ratio\n      // and the old ratio are on the opposite sides of a threshold.\n\n      if (threshold == oldRatio || threshold == newRatio || threshold < oldRatio !== threshold < newRatio) {\n        return true;\n      }\n    }\n  };\n  /**\n   * Returns whether or not the root element is an element and is in the DOM.\n   * @return {boolean} True if the root element is an element and is in the DOM.\n   * @private\n   */\n\n\n  IntersectionObserver.prototype._rootIsInDom = function () {\n    return !this.root || containsDeep(document, this.root);\n  };\n  /**\n   * Returns whether or not the target element is a child of root.\n   * @param {Element} target The target element to check.\n   * @return {boolean} True if the target element is a child of root.\n   * @private\n   */\n\n\n  IntersectionObserver.prototype._rootContainsTarget = function (target) {\n    return containsDeep(this.root || document, target) && (!this.root || this.root.ownerDocument == target.ownerDocument);\n  };\n  /**\n   * Adds the instance to the global IntersectionObserver registry if it isn't\n   * already present.\n   * @private\n   */\n\n\n  IntersectionObserver.prototype._registerInstance = function () {\n    if (registry.indexOf(this) < 0) {\n      registry.push(this);\n    }\n  };\n  /**\n   * Removes the instance from the global IntersectionObserver registry.\n   * @private\n   */\n\n\n  IntersectionObserver.prototype._unregisterInstance = function () {\n    var index = registry.indexOf(this);\n    if (index != -1) registry.splice(index, 1);\n  };\n  /**\n   * Returns the result of the performance.now() method or null in browsers\n   * that don't support the API.\n   * @return {number} The elapsed time since the page was requested.\n   */\n\n\n  function now() {\n    return window.performance && performance.now && performance.now();\n  }\n  /**\n   * Throttles a function and delays its execution, so it's only called at most\n   * once within a given time period.\n   * @param {Function} fn The function to throttle.\n   * @param {number} timeout The amount of time that must pass before the\n   *     function can be called again.\n   * @return {Function} The throttled function.\n   */\n\n\n  function throttle(fn, timeout) {\n    var timer = null;\n    return function () {\n      if (!timer) {\n        timer = setTimeout(function () {\n          fn();\n          timer = null;\n        }, timeout);\n      }\n    };\n  }\n  /**\n   * Adds an event handler to a DOM node ensuring cross-browser compatibility.\n   * @param {Node} node The DOM node to add the event handler to.\n   * @param {string} event The event name.\n   * @param {Function} fn The event handler to add.\n   * @param {boolean} opt_useCapture Optionally adds the even to the capture\n   *     phase. Note: this only works in modern browsers.\n   */\n\n\n  function addEvent(node, event, fn, opt_useCapture) {\n    if (typeof node.addEventListener == 'function') {\n      node.addEventListener(event, fn, opt_useCapture || false);\n    } else if (typeof node.attachEvent == 'function') {\n      node.attachEvent('on' + event, fn);\n    }\n  }\n  /**\n   * Removes a previously added event handler from a DOM node.\n   * @param {Node} node The DOM node to remove the event handler from.\n   * @param {string} event The event name.\n   * @param {Function} fn The event handler to remove.\n   * @param {boolean} opt_useCapture If the event handler was added with this\n   *     flag set to true, it should be set to true here in order to remove it.\n   */\n\n\n  function removeEvent(node, event, fn, opt_useCapture) {\n    if (typeof node.removeEventListener == 'function') {\n      node.removeEventListener(event, fn, opt_useCapture || false);\n    } else if (typeof node.detatchEvent == 'function') {\n      node.detatchEvent('on' + event, fn);\n    }\n  }\n  /**\n   * Returns the intersection between two rect objects.\n   * @param {Object} rect1 The first rect.\n   * @param {Object} rect2 The second rect.\n   * @return {?Object|?ClientRect} The intersection rect or undefined if no\n   *     intersection is found.\n   */\n\n\n  function computeRectIntersection(rect1, rect2) {\n    var top = Math.max(rect1.top, rect2.top);\n    var bottom = Math.min(rect1.bottom, rect2.bottom);\n    var left = Math.max(rect1.left, rect2.left);\n    var right = Math.min(rect1.right, rect2.right);\n    var width = right - left;\n    var height = bottom - top;\n    return width >= 0 && height >= 0 && {\n      top: top,\n      bottom: bottom,\n      left: left,\n      right: right,\n      width: width,\n      height: height\n    } || null;\n  }\n  /**\n   * Shims the native getBoundingClientRect for compatibility with older IE.\n   * @param {Element} el The element whose bounding rect to get.\n   * @return {DOMRect|ClientRect} The (possibly shimmed) rect of the element.\n   */\n\n\n  function getBoundingClientRect(el) {\n    var rect;\n\n    try {\n      rect = el.getBoundingClientRect();\n    } catch (err) {// Ignore Windows 7 IE11 \"Unspecified error\"\n      // https://github.com/w3c/IntersectionObserver/pull/205\n    }\n\n    if (!rect) return getEmptyRect(); // Older IE\n\n    if (!(rect.width && rect.height)) {\n      rect = {\n        top: rect.top,\n        right: rect.right,\n        bottom: rect.bottom,\n        left: rect.left,\n        width: rect.right - rect.left,\n        height: rect.bottom - rect.top\n      };\n    }\n\n    return rect;\n  }\n  /**\n   * Returns an empty rect object. An empty rect is returned when an element\n   * is not in the DOM.\n   * @return {ClientRect} The empty rect.\n   */\n\n\n  function getEmptyRect() {\n    return {\n      top: 0,\n      bottom: 0,\n      left: 0,\n      right: 0,\n      width: 0,\n      height: 0\n    };\n  }\n  /**\n   * Ensure that the result has all of the necessary fields of the DOMRect.\n   * Specifically this ensures that `x` and `y` fields are set.\n   *\n   * @param {?DOMRect|?ClientRect} rect\n   * @return {?DOMRect}\n   */\n\n\n  function ensureDOMRect(rect) {\n    // A `DOMRect` object has `x` and `y` fields.\n    if (!rect || 'x' in rect) {\n      return rect;\n    } // A IE's `ClientRect` type does not have `x` and `y`. The same is the case\n    // for internally calculated Rect objects. For the purposes of\n    // `IntersectionObserver`, it's sufficient to simply mirror `left` and `top`\n    // for these fields.\n\n\n    return {\n      top: rect.top,\n      y: rect.top,\n      bottom: rect.bottom,\n      left: rect.left,\n      x: rect.left,\n      right: rect.right,\n      width: rect.width,\n      height: rect.height\n    };\n  }\n  /**\n   * Inverts the intersection and bounding rect from the parent (frame) BCR to\n   * the local BCR space.\n   * @param {DOMRect|ClientRect} parentBoundingRect The parent's bound client rect.\n   * @param {DOMRect|ClientRect} parentIntersectionRect The parent's own intersection rect.\n   * @return {ClientRect} The local root bounding rect for the parent's children.\n   */\n\n\n  function convertFromParentRect(parentBoundingRect, parentIntersectionRect) {\n    var top = parentIntersectionRect.top - parentBoundingRect.top;\n    var left = parentIntersectionRect.left - parentBoundingRect.left;\n    return {\n      top: top,\n      left: left,\n      height: parentIntersectionRect.height,\n      width: parentIntersectionRect.width,\n      bottom: top + parentIntersectionRect.height,\n      right: left + parentIntersectionRect.width\n    };\n  }\n  /**\n   * Checks to see if a parent element contains a child element (including inside\n   * shadow DOM).\n   * @param {Node} parent The parent element.\n   * @param {Node} child The child element.\n   * @return {boolean} True if the parent node contains the child node.\n   */\n\n\n  function containsDeep(parent, child) {\n    var node = child;\n\n    while (node) {\n      if (node == parent) return true;\n      node = getParentNode(node);\n    }\n\n    return false;\n  }\n  /**\n   * Gets the parent node of an element or its host element if the parent node\n   * is a shadow root.\n   * @param {Node} node The node whose parent to get.\n   * @return {Node|null} The parent node or null if no parent exists.\n   */\n\n\n  function getParentNode(node) {\n    var parent = node.parentNode;\n\n    if (node.nodeType ==\n    /* DOCUMENT */\n    9 && node != document) {\n      // If this node is a document node, look for the embedding frame.\n      return getFrameElement(node);\n    }\n\n    if (parent && parent.nodeType == 11 && parent.host) {\n      // If the parent is a shadow root, return the host element.\n      return parent.host;\n    }\n\n    if (parent && parent.assignedSlot) {\n      // If the parent is distributed in a <slot>, return the parent of a slot.\n      return parent.assignedSlot.parentNode;\n    }\n\n    return parent;\n  } // Exposes the constructors globally.\n\n\n  window.IntersectionObserver = IntersectionObserver;\n  window.IntersectionObserverEntry = IntersectionObserverEntry;\n})();"],"sourceRoot":""}